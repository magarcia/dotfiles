[alias]
  co = checkout
  cob = checkout -b
  ci = commit -m
  ec = config --global --edit
  st = status
  br = branch
  df = diff
  re = checkout .
  pr = pull --rebase
  lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  l = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative -10
  pop = stash pop
  rclone = clone --recursive

  # recursively pull repo and its submodule (if any)
  rpull = !git pull && git submodule update --init --recursive

  # list commits in short form, with colors and branch/tag annotations
  hist = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cgreen\\ [%cn]" --decorate --date=short
  hsit = !git hist

  # similar to hist but includes a list of files changed in commit
  histf = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cgreen\\ [%cn]" --decorate --numstat
  hsitf = !git histf

  # graph view of a project's commit history
  histg = log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short
  hsitg = !git histg

  # add and commit changes, with and without a message
  ac = !git add . && git commit -m \"$1\" && :
  acnc = !git add . && git commit --allow-empty-message -m \"\"

  # add and commit AND PUSH changes, with and without a message
  shove = !git add . && git commit -m \"$1\" && git push origin && :
  shovenc = !git add . && git commit --allow-empty-message -m \"\" && git push origin

  # display your currently defined aliases
  aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /'

  # pass in the name or email address of someone involved with the project
  whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"

  # Switch to recent branches in an interactive way with diff
  change = !git branch --sort=-committerdate | fzf --header 'Checkout Recent Branch' --preview 'git diff {1} --color=always' | xargs git checkout

  # open the url for the current repo in the browser
  browse = "!open `git remote -v | grep origin | grep fetch | awk '{print $2}' | sed -e's=:=/=' -e 's=git@=http://='`"

  # Get the current branch name (not so useful in itself, but used in
  # other aliases)
  branch-name = "!git rev-parse --abbrev-ref HEAD"

  # Sync fork with upstream
  update = "!git fetch upstream && git rebase upstream/$(git branch-name)"

  # Push the current branch to the remote "origin", and set it to track
  # the upstream branch
  publish = "!git push -u origin $(git branch-name)"

  # Delete the remote version of the current branch
  unpublish = "!git push origin :$(git branch-name)"

  # Unstage any files that have been added to the staging area
  unstage = reset HEAD

  # Delete any branches that have been merged into master
  # See also: https://gist.github.com/robmiller/5133264
  delete-merged-branches = "!git co master && git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  undo = reset --soft HEAD~1